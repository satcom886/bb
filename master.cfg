# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

c['workers'] = []

allworkers = ["Port", "TURNer"]
for w in allworkers:
    c['workers'].append(worker.Worker(w, os.environ.get('BUILDBOT_WORKER_SECRET')))

if 'BUILDBOT_MQ_URL' in os.environ:
    c['mq'] = {
        'type' : 'wamp',
        'router_url': os.environ['BUILDBOT_MQ_URL'],
        'realm': os.environ.get('BUILDBOT_MQ_REALM', 'buildbot').decode('utf-8'),
        'debug' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_websockets' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_lowlevel' : 'BUILDBOT_MQ_DEBUG' in os.environ,
    }
# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'git://github.com/satcom886/builds.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

c['builders'] = []

# just playing around for now
aurpackages = ["yay", "telegraf"]
aur_buildernames = []
for index, package in enumerate(aurpackages):
    aur_buildernames.append("aur-" + package)
    f = util.BuildFactory()
    f.addStep(steps.MakeDirectory(dir="aur-packages"))
    f.addStep(steps.ShellCommand(command=["docker", "pull", "satcom886/arch-builder:base"]))
    f.addStep(steps.ShellCommand(command=["docker", "run", "--cidfile", "aur-packages/builder-cid", "satcom886/arch-builder:base", "/usr/bin/build-aur", package]))
    f.addStep(steps.ShellCommand(command=["docker", "cp", "$(cat /tmp/cid-arm64):/home/builder/built/.", "aur-packages/"]))
    f.addStep(steps.ShellCommand(command=["find aur-packages/ -iname *pkg.tar* -exec print \"{}\" $UPLOAD_PW \;"]))
    f.addStep(steps.RemoveDirectory(dir="aur-packages"))
    c['builders'].append(util.BuilderConfig(name="aur-" + package, workernames=allworkers, factory=f))

factory = util.BuildFactory()
# check out the source
factory.addStep(steps.Git(repourl='http://github.com/buildbot/pyflakes.git', mode='incremental'))
# run the tests (note that this will require that 'trial' is installed)
factory.addStep(steps.ShellCommand(command=["trial", "pyflakes"]))

c['builders'].append(
    util.BuilderConfig(name="runtests",
      workernames=allworkers,
      factory=factory))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
#c['schedulers'].append(schedulers.SingleBranchScheduler(
#                            name="all",
#                            change_filter=util.ChangeFilter(branch='master'),
#                            treeStableTimer=None,
#                            builderNames=["runtests"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["runtests"]))


c['schedulers'].append(schedulers.ForceScheduler(
                            name="rebuild",
                            builderNames=aur_buildernames))

####### REPORTER TARGETS

# 'services' is a list of Reporter Targets. The results of each build will be
# pushed to these targets. buildbot/reporters/*.py has a variety to choose from,
# like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "APBS"
c['titleURL'] = "https://launchpad.net/pyflakes"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://localhost:8010/")

# minimalistic config to activate new web UI
c['www'] = dict(port=os.environ.get("BUILDBOT_WEB_PORT", 8010),
                plugins=dict(waterfall_view={}, console_view={}))
c['www']['authz'] = util.Authz(
        allowRules = [
            util.AnyEndpointMatcher(role="admins")
        ],
        roleMatchers = [
            util.RolesFromUsername(roles=['admins'], usernames=[os.environ.get('WEB_USERNAME')])
        ]
)
c['www']['auth'] = util.UserPasswordAuth([(os.environ.get('WEB_USERNAME'), os.environ.get('WEB_PASSWORD'))])

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}
